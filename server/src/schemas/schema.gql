type Query {
  "Users list"
  users: ResultUsers
  "User login"
  login(email: String!, password: String!): ResultLogin
  "Token authentication"
  me: ResultUser
}

type Mutation {
  "Register"
  register(user: UserInput!): ResultUser
}

"Response properties"
interface Result {
  "Operation status"
  status: Boolean!
  "Operation message"
  message: String!
}

type User {
  "Unique Id"
  id: ID!
  "Name"
  name: String!
  "Lastname"
  lastname: String!
  "Email"
  email: String!
  "Password"
  password: String!
  "Register Date"
  registerDate: String!
  "Birthday"
  birthday: String!
  "User permises"
  role: Role!
}

input UserInput {
  "Id"
  id: ID
  "Name"
  name: String!
  "Lastname"
  lastname: String!
  "Email"
  email: String!
  "Password"
  password: String!
  "Birthday"
  birthday: String!
  "User permises"
  role: Role=CLIENT
}

type ResultUsers implements Result {
  "Operation status"
  status: Boolean!
  "Operation message"
  message: String!
  "Users list"
  users: [User!]!
}

type ResultUser implements Result {
  "Operation status"
  status: Boolean!
  "Operation message"
  message: String!
  "User info"
  user: User
}

type ResultLogin implements Result {
  "Operation status"
  status: Boolean!
  "Operation message"
  message: String!
  "User information"
  token: String
}

enum Role {
  CLIENT
  ADMIN
}
